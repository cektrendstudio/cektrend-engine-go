// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cektrendstudio/cektrend-engine-go/service (interfaces: AuthRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/cektrendstudio/cektrend-engine-go/models"
	serror "github.com/cektrendstudio/cektrend-engine-go/pkg/serror"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockAuthRepository) CreateToken(arg0 context.Context, arg1 models.CreateTokenRequest) (int64, serror.SError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(serror.SError)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthRepositoryMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthRepository)(nil).CreateToken), arg0, arg1)
}

// RevokedInactiveToken mocks base method.
func (m *MockAuthRepository) RevokedInactiveToken(arg0 context.Context, arg1 models.RevokedInactiveTokenRequest) serror.SError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokedInactiveToken", arg0, arg1)
	ret0, _ := ret[0].(serror.SError)
	return ret0
}

// RevokedInactiveToken indicates an expected call of RevokedInactiveToken.
func (mr *MockAuthRepositoryMockRecorder) RevokedInactiveToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokedInactiveToken", reflect.TypeOf((*MockAuthRepository)(nil).RevokedInactiveToken), arg0, arg1)
}

// UpdateToken mocks base method.
func (m *MockAuthRepository) UpdateToken(arg0 context.Context, arg1 models.UpdateTokenRequest) serror.SError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", arg0, arg1)
	ret0, _ := ret[0].(serror.SError)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockAuthRepositoryMockRecorder) UpdateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockAuthRepository)(nil).UpdateToken), arg0, arg1)
}

// ValidateAccessToken mocks base method.
func (m *MockAuthRepository) ValidateAccessToken(arg0 context.Context, arg1 models.ValidateAccessTokenRequest) (models.ValidateAccessTokenResponse, serror.SError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", arg0, arg1)
	ret0, _ := ret[0].(models.ValidateAccessTokenResponse)
	ret1, _ := ret[1].(serror.SError)
	return ret0, ret1
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockAuthRepositoryMockRecorder) ValidateAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockAuthRepository)(nil).ValidateAccessToken), arg0, arg1)
}

// ValidateRefreshToken mocks base method.
func (m *MockAuthRepository) ValidateRefreshToken(arg0 context.Context, arg1 models.ValidateRefreshTokenRequest) (models.ValidateRefreshTokenResponse, serror.SError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(models.ValidateRefreshTokenResponse)
	ret1, _ := ret[1].(serror.SError)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockAuthRepositoryMockRecorder) ValidateRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockAuthRepository)(nil).ValidateRefreshToken), arg0, arg1)
}
